// Prisma ORM Schema para trabalhar com react queries
// @author Guilherme Valeriano

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//Schema apenas para o exemplo, uma modelagem simples
model Courses {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  dateCreation    DateTime
  courseDateLimit DateTime
  courseType      String
  level           String
  tecnology       String
  carrer          String
  author          User     @relation(fields: [authorId], references: [id])
  authorId        String   @db.ObjectId
  thumbCourse     String
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  email    String    @unique
  name     String?
  password String
  courses  Courses[]
}

// Vou deixar esse modelo comentado, onde seria o ideal com relacionamentos e varias tabelas
// Para esse MVP vou deixar todas as informações apenas na tabela de Cursos em uma modelagem mais simples
// model Courses {
//   id              String    @id @default(auto()) @map("_id") @db.ObjectId
//   title           String
//   dateCreation    DateTime
//   courseDateLimit DateTime
//   courseType      String
//   level           String
//   tecnology       Techs[]
//   carrer          Carrers[]
//   author          User      @relation(fields: [authorId], references: [id])
//   authorId        String    @db.ObjectId
//   thumbCourse     String
// }

// model User {
//   id       String    @id @default(auto()) @map("_id") @db.ObjectId
//   email    String    @unique
//   name     String?
//   password String
//   courses  Courses[]
//   carrer   Carrers[]
// }

// model Techs {
//   id       String  @id @default(auto()) @map("_id") @db.ObjectId
//   name     String
//   course   Courses @relation(fields: [courseId], references: [id])
//   courseId String  @db.ObjectId
// }

// model Carrers {
//   id       String  @id @default(auto()) @map("_id") @db.ObjectId
//   name     String
//   course   Courses @relation(fields: [courseId], references: [id])
//   courseId String  @db.ObjectId
//   user     User    @relation(fields: [userId], references: [id])
//   userId   String  @db.ObjectId
// }
